C51 COMPILER V9.01   TOUCH                                                                 09/13/2018 15:46:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TOUCH
OBJECT MODULE PLACED IN .\Output\touch.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE Code\touch.c LARGE BROWSE INCDIR(.\Include;.\wifi;.\Code) DEFINE(FOSC_16
                    -0000) DEBUG OBJECTEXTEND PRINT(.\LST\touch.lst) OBJECT(.\Output\touch.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "Common.h"
   3          #include "Delay.h"
   4          #include "SFR_Macro.h"
   5          #include "Function_define.h"
   6          #include "touch.h"
   7          
   8          
   9          UINT16 xdata touchflag = 2;
  10          UINT16 data touchtimes = 60000;
  11          volatile UINT16 touchvalue = 0;
  12          
  13          
  14          
  15          void  touchbyte(void)
  16          {
  17   1          UINT8 i;
  18   1              UINT16 b = 0;
  19   1      
  20   1              for(i=0;i<16;i++)          
  21   1              {               
  22   2                      touchflag =2;   
  23   2                      while(P12);
  24   2                      while((!P12)&&touchflag++);
  25   2                      if(touchflag>0x50)
  26   2                   b = 0      ;
  27   2                       else
  28   2                   b = 1;
  29   2                                       
  30   2                      if(touchflag ==1)break;          //timeout break                
  31   2                      touchvalue<<=1;
  32   2                      touchvalue |= b;     
  33   2              }
  34   1      }
  35                  
  36          
  37            void gettouch(void)
  38          {
  39   1      
  40   1              touchflag = 1;
  41   1              touchtimes =50000; 
  42   1              while(touchflag<0x200&&touchtimes++)
  43   1              {
  44   2              while((!P12)&&touchflag++);
  45   2              if(touchflag<0x200)
  46   2              touchflag = 2;
  47   2              }
  48   1              if(touchtimes!=1)
  49   1          touchbyte();           
  50   1      
  51   1      }
  52          /**********************************************************************
  53                  PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV> 
  54                                                                          = (16MHz/8)/(0x3FF + 1)
C51 COMPILER V9.01   TOUCH                                                                 09/13/2018 15:46:03 PAGE 2   

  55                                                                          =1.9KHz
  56          ***********************************************************************/
  57          
  58          void keytoneInt()
  59          {                                                       
  60   1              P14_PushPull_Mode;
  61   1              P13_PushPull_Mode;
  62   1              PWM1_P14_OUTPUT_ENABLE; 
  63   1              PWM_INT_PWM1;
  64   1              PWM_CLOCK_DIV_8;
  65   1              PWM_CENTER_TYPE ;       
  66   1      
  67   1      }
  68          void enabletone()
  69          {
  70   1         set_LOAD;
  71   1         set_PWMRUN;
  72   1         P13 = 1;
  73   1         Timer2_Delay500us(200)       ;
  74   1         P13 = 0;                                                     //PWM0 high duty = 1/2 PWM period
  75   1         Timer2_Delay500us(400) ;
  76   1         clr_PWMRUN;
  77   1      }
  78          void hitone()
  79          {
  80   1         PWMPH = 0x01;PWMPL = 0x40;      //27f
  81   1         PWM1H = 0x00;PWM1L = 0xa0;      //140
  82   1         enabletone();
  83   1      }
  84          void mitone()
  85          {
  86   1         PWMPH = 0x01;PWMPL = 0x90;    //31f
  87   1         PWM1H = 0x00;PWM1L = 0xc8;    //190
  88   1         enabletone();
  89   1      }
  90          void lotone()
  91          {
  92   1         PWMPH = 0x01;PWMPL = 0xe0;   //3bf
  93   1         PWM1H = 0x00;PWM1L = 0xf0;   //1e0
  94   1         enabletone();
  95   1      
  96   1      }
  97          void ontone()
  98          {       
  99   1         lotone();  
 100   1         mitone();
 101   1         hitone();
 102   1      }
 103          void offtone()
 104          {     
 105   1         hitone();    
 106   1         mitone();    
 107   1         lotone();
 108   1      }
 109          void keytone()
 110          {          
 111   1         PWMPH = 0x01;PWMPL = 0x54;      //27f
 112   1         PWM1H = 0x00;PWM1L = 0xaa;      //140
 113   1         enabletone();
 114   1      }
 115          void checktone()
 116          { 
C51 COMPILER V9.01   TOUCH                                                                 09/13/2018 15:46:03 PAGE 3   

 117   1         mitone();
 118   1         lotone();
 119   1      }
 120          
 121          void alarmtone()
 122          {
 123   1         PWMPH = 0x01;PWMPL = 0x54;      //27f
 124   1         PWM1H = 0x00;PWM1L = 0xaa;
 125   1         set_LOAD;
 126   1         PWMRUN = ~PWMRUN;
 127   1         P13 = PWMRUN;
 128   1         
 129   1      }
 130          
 131          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    396    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
