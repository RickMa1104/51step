C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LIGHT
OBJECT MODULE PLACED IN .\Output\light.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\light.c LARGE BROWSE INCDIR(.\Include;.\wifi;.\Code) DEFINE(FOSC_16000
                    -0) DEBUG OBJECTEXTEND PRINT(.\LST\light.lst) OBJECT(.\Output\light.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "Common.h"
   3          #include "light.h"
   4          #include "Delay.h"
   5          UINT16 xdata szlight[8] = {0};
   6          UINT16 lightoff,nshow,point;
   7          extern bit flag8;
   8          UINT8 nairlevel;
   9          
  10          void lightbelt(UINT8 b)
  11          {
  12   1        switch(b)
  13   1        {
  14   2              case(0):P01 =0; P03 =0; P04 =0;break;              //01g 03r 04b
  15   2              case(1):P01 =1; P03 =0; P04 =0;break;
  16   2              case(2):P01 =0; P03 =0; P04 =1;break;
  17   2              case(3):P01 =1; P03 =1; P04 =0;break;
  18   2              case(4):P01 =0; P03 =1; P04 =0;break;
  19   2              case(5):P01 =1; P03 =1; P04 =1;break;
  20   2              default:break;
  21   2        }
  22   1      
  23   1      }
  24          
  25          void setbint()          //P00 is setb
  26          {
  27   1       P00 = 1;
  28   1       P00 =0;
  29   1      }
  30          void sendbit(bit b)             //p10 is clk;p11 is dio;
  31          { 
  32   1        P10 = 0;
  33   1        P11 = b;
  34   1        P10 = 1;                 
  35   1      }
  36          
  37          void sendbyte(UINT8 byte)
  38          {
  39   1         UINT8 i;
  40   1         for(i=0;i<8;i++)
  41   1         {   
  42   2           bit b = byte&(1<<i);
  43   2               sendbit(b);
  44   2         }
  45   1      }
  46          
  47          void fscreen()
  48          {
  49   1       UINT8 i;
  50   1       setbint();
  51   1       sendbyte(0X40);
  52   1       setbint();
  53   1       sendbyte(0xC0);
  54   1       
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 2   

  55   1       for(i=0;i<8;i++)
  56   1       {
  57   2         sendbyte(szlight[i]);
  58   2         sendbyte(szlight[i]>>8);
  59   2       }
  60   1       setbint();
  61   1       sendbyte(0x8f);
  62   1       P00 = 1;
  63   1      
  64   1      }
  65          
  66          //void addfixed(UINT8 add,UINT8 data0)
  67          //{
  68          //  setbint();
  69          //  sendbyte(0x44);
  70          //  setbint();
  71          //  sendbyte(add);
  72          //  sendbyte(data0);
  73          //  setbint();
  74          //  sendbyte(0x8f);
  75          //  P00 = 1;
  76          //}
  77          
  78          /*
  79          get point from number;
  80          */
  81          UINT16 getnum(UINT8 num)
  82          {
  83   1        switch(num)
  84   1        {
  85   2         case(0):return (UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<dline)|(1<<eline)|(1<<fline) ;
  86   2         case(1):return (UINT16)(1<<bline)|(1<<cline) ;
  87   2         case(2):return (UINT16)(1<<aline)|(1<<bline)|(1<<dline)|(1<<eline)|(1<<gline) ;
  88   2         case(3):return (UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<dline)|(1<<gline) ;
  89   2         case(4):return (UINT16)(1<<bline)|(1<<cline)|(1<<fline)|(1<<gline);
  90   2         case(5):return (UINT16)(1<<aline)|(1<<cline)|(1<<dline)|(1<<fline)|(1<<gline); 
  91   2         case(6):return (UINT16)(1<<aline)|(1<<cline)|(1<<dline)|(1<<eline)|(1<<fline)|(1<<gline); 
  92   2         case(7):return (UINT16)(1<<aline)|(1<<bline)|(1<<cline);
  93   2         case(8):return (UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<dline)|(1<<eline)|(1<<fline)|(1<<gline);
  94   2         case(9):return (UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<dline)|(1<<fline)|(1<<gline);
  95   2         case(10):return (UINT16)(1<<hline);  // show piont
  96   2         case(11):return ~((UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<dline)|(1<<eline)|(1<<fline)|(1<<gline))
             -;         //off num
  97   2         case(12):return ~((UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<dline)|(1<<eline)|(1<<fline)|(1<<gline)|
             -(1<<hline));//off num and point
  98   2         case(13):return (UINT16)(1<<aline)|(1<<bline)|(1<<cline)|(1<<eline)|(1<<fline); //n
  99   2         case(14):return (UINT16)(1<<bline)|(1<<cline)|(1<<dline)|(1<<eline)|(1<<fline);      //u
 100   2         default :return 0;
 101   2      
 102   2        }      
 103   1      
 104   1      }
 105          
 106          
 107          void cszlight(bit light)
 108          {
 109   1        UINT8 i;
 110   1        UINT16 value=0;
 111   1        if(light)
 112   1        value = 0xffff;
 113   1      
 114   1        for(i=0;i<8;i++)
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 3   

 115   1        {
 116   2         szlight[i] = value;
 117   2        }
 118   1      } 
 119          
 120          void writeruntime(UINT8 tho,UINT8 hun, UINT8 ten, UINT8 one, UINT8 lhun, UINT8 lten, UINT8 lone )
 121          {
 122   1              lightoff = getnum(12);
 123   1              point = getnum(10);
 124   1              
 125   1              szlight[0] &= lightoff;
 126   1              nshow = getnum(tho);
 127   1              szlight[0] |= nshow;
 128   1              
 129   1              szlight[1] &= lightoff;    
 130   1              nshow = getnum(hun);
 131   1              szlight[1] |= nshow;
 132   1              
 133   1              szlight[2] &= lightoff;  
 134   1              nshow = getnum(ten);
 135   1              szlight[2] |= nshow;
 136   1              
 137   1              szlight[3] &= lightoff;    
 138   1              nshow = getnum(one);
 139   1              szlight[3] |= nshow;
 140   1              
 141   1              szlight[4] &= ~point;
 142   1              szlight[5] &= ~point;
 143   1              szlight[7] &= ~point;
 144   1              szlight[6] &= ~point; //this pm25 title;
 145   1              
 146   1              szlight[5] &= lightoff;  
 147   1              nshow = getnum(lhun);
 148   1              szlight[5] |= nshow;
 149   1              
 150   1              szlight[4] &= lightoff;   
 151   1              nshow = getnum(lten);
 152   1              szlight[4] |= nshow;
 153   1              
 154   1              szlight[7] &= lightoff;    
 155   1              nshow = getnum(lone);
 156   1              szlight[7] |= nshow;
 157   1      }
 158          
 159          void writeun()
 160          {
 161   1              lightoff = getnum(12);
 162   1      
 163   1              szlight[4] &= lightoff;   
 164   1              nshow = getnum(14);
 165   1              szlight[4] |= nshow;
 166   1      
 167   1              szlight[7] &= lightoff;    
 168   1              nshow = getnum(13);
 169   1              szlight[7] |= nshow;
 170   1      
 171   1      }
 172          void writeno()
 173          {
 174   1              lightoff = getnum(12);
 175   1      
 176   1              szlight[4] &= lightoff;   
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 4   

 177   1              nshow = getnum(13);
 178   1              szlight[4] |= nshow;
 179   1      
 180   1              szlight[7] &= lightoff;    
 181   1              nshow = getnum(0);
 182   1              szlight[7] |= nshow;
 183   1      
 184   1      }
 185          void writetem(UINT8 ten,UINT8 one)
 186          {       
 187   1              lightoff = getnum(12);    // off all light;
 188   1              point = getnum(10);
 189   1      
 190   1              szlight[0] &= lightoff;
 191   1              if(ten != 0) 
 192   1              {   
 193   2          nshow = getnum(ten);
 194   2              szlight[0] |= nshow;    
 195   2              }
 196   1              szlight[0] |= point;
 197   1      
 198   1              szlight[1] &= lightoff;    
 199   1          nshow = getnum(one);
 200   1              szlight[1] |= nshow;
 201   1              szlight[1] |= point;
 202   1              
 203   1      
 204   1      }
 205          void writewet(UINT8 ten,UINT8 one)
 206          {       
 207   1      
 208   1              lightoff = getnum(12);
 209   1              point = getnum(10);
 210   1      
 211   1              szlight[2] &= lightoff;  
 212   1              if(ten != 0)  
 213   1              {
 214   2          nshow = getnum(ten);
 215   2              szlight[2] |= nshow;
 216   2              }
 217   1              szlight[2] |= point;
 218   1      
 219   1              szlight[3] &= lightoff;    
 220   1          nshow = getnum(one);
 221   1              szlight[3] |= nshow;
 222   1              szlight[3] |= point;
 223   1      }
 224          /*
 225          title is c5-8,ten is c5-6 and c-3  ;
 226          */
 227          void writest(UINT8 ten ,UINT8 one)
 228          {
 229   1              lightoff = getnum(11);
 230   1              szlight[6] &= lightoff;    
 231   1          nshow = getnum(one);
 232   1              szlight[6] |= nshow;
 233   1              szlight[2] |=0x8000; //light st point;
 234   1      
 235   1              if(ten == 1)
 236   1              szlight[2] |=0x2400; //light st ten;
 237   1              else
 238   1              {
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 5   

 239   2              szlight[2] &=0xDBFF;    //lightff st ten;
 240   2              if(!one)
 241   2              {
 242   3               szlight[6] &= lightoff; 
 243   3               szlight[2] &=~0x8000; //light st point;
 244   3              }
 245   2              } 
 246   1      }
 247          void write8()
 248          {
 249   1          flag8 = 1;
 250   1              szlight[6] &= getnum(11);       //      off num;
 251   1              szlight[2] &=~0x8000;           //      off point;
 252   1              szlight[6] |= getnum(8);        //  write 8;
 253   1      }
 254          
 255          
 256          
 257          void writepm25(UINT8 hun,UINT8 ten,UINT8 one)
 258          {       
 259   1              UINT16 sum= hun*100+ ten*10 +one;
 260   1              lightoff = getnum(11);
 261   1              point = getnum(10);
 262   1      
 263   1              szlight[5] &= lightoff;  
 264   1              if(hun != 0)
 265   1              {  
 266   2          nshow = getnum(hun);
 267   2              szlight[5] |= nshow;
 268   2              }
 269   1      
 270   1              szlight[4] &= lightoff;   
 271   1              if((hun!=0 )||(hun==0&&ten!=0))
 272   1              { 
 273   2          nshow = getnum(ten);
 274   2              szlight[4] |= nshow;
 275   2              }
 276   1      
 277   1              szlight[7] &= lightoff;    
 278   1          nshow = getnum(one);
 279   1              szlight[7] |= nshow;
 280   1              
 281   1              szlight[6] |= point;    //this is pm25 title
 282   1      
 283   1              if(sum>bad)
 284   1              {
 285   2               szlight[5] |= point;
 286   2               szlight[4] &= ~point;
 287   2               szlight[7] &= ~point;
 288   2               nairlevel=3;   
 289   2              }
 290   1              if(sum<good)
 291   1              {
 292   2               szlight[7] |= point;
 293   2               szlight[4] &= ~point;
 294   2               szlight[5] &= ~point;
 295   2               nairlevel=0;
 296   2              }
 297   1              if((sum<bad)&&(sum>good))
 298   1              {
 299   2           szlight[4] |= point;
 300   2               szlight[5] &= ~point;
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 6   

 301   2               szlight[7] &= ~point;
 302   2               nairlevel=1;
 303   2              }
 304   1      
 305   1      }
 306          
 307          void wind(UINT8 speed)
 308          {
 309   1       switch(speed)
 310   1       {
 311   2       case(1):  szlight[3] |= 0x2000; szlight[3] &= ~0x0400;szlight[6] &= ~0x8400; break;
 312   2       case(2):  szlight[3] |= 0x2400; szlight[6] &= ~0x8400;  break;
 313   2       case(3):  szlight[3] |= 0x2400; szlight[6] |= 0x8000;szlight[6] &= ~0x0400;break;
 314   2       case(4):  szlight[3] |= 0x2400; szlight[6] |= 0x8400; break;
 315   2       default:  szlight[3] &= ~0x2400; szlight[6] &= ~0x8400; 
 316   2       }
 317   1        szlight[3] |= 0x8000; //this is wind speed title
 318   1      }
 319          void notimer(bit btime)
 320          {
 321   1       if(btime)
 322   1       szlight[6] |= 0x0080; 
 323   1       else
 324   1       szlight[6] &= ~0x0080;
 325   1       
 326   1      }
 327          void dry(bit dry)
 328          {
 329   1       if(dry)
 330   1       szlight[0] |= 0xa400; 
 331   1       else
 332   1       szlight[0] &= ~0xa400;
 333   1       
 334   1      }
 335          void wet(bit wet)
 336          {
 337   1       if(wet)
 338   1       szlight[1] |= 0xa400;
 339   1       else
 340   1       szlight[1] &= ~0xa400;
 341   1      }
 342          void bac(bit bac)
 343          {
 344   1               if(bac)
 345   1              {
 346   2               szlight[6] |= 0x2000;
 347   2               szlight[4] |= 0xa000;
 348   2              }
 349   1              else
 350   1              {
 351   2               szlight[6] &= ~0x2000;
 352   2               szlight[4] &= ~0xa000;
 353   2              }
 354   1      }
 355          void anion( bit anion)
 356          {
 357   1              if(anion)
 358   1              szlight[5] |= 0xa400;
 359   1              else
 360   1              szlight[5] &= ~0xa400;
 361   1      }
 362          void wifi(bit bwifi)
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 7   

 363          {
 364   1              if(bwifi)
 365   1              szlight[4] |= 0x0400;
 366   1              else
 367   1              szlight[4] &= ~0x0400;
 368   1      }
 369          void wifisymbol(bit bsymbol)
 370          {
 371   1        if(bsymbol)
 372   1        szlight[7] |= 0x8000;
 373   1        else
 374   1        szlight[7] &= ~0x8000;
 375   1      }
 376          void filter(bit fil)
 377          {
 378   1              if(fil)
 379   1              szlight[7] |= 0x2400;
 380   1              else    
 381   1          szlight[7] &= ~0x2400;
 382   1      }
 383          void onoff(bit on)
 384          {
 385   1         if(on)
 386   1              {
 387   2               szlight[0] |= 0x002e;
 388   2               szlight[0] &= ~0x0010;
 389   2              }
 390   1         else
 391   1              { 
 392   2              szlight[0] |= 0x0010;
 393   2              szlight[0] &= ~0x002e;
 394   2              }
 395   1      
 396   1      }
 397          void autowork(bit on)
 398          {
 399   1         if(on)
 400   1               {
 401   2                szlight[1] |= 0x002c;    //0x0014;0x002a
 402   2                szlight[1] &= ~0x0012;
 403   2               }
 404   1         else
 405   1               {
 406   2                szlight[1] |= 0x0012;    //0x0014;0x002a
 407   2                szlight[1] &= ~0x002c;
 408   2               }
 409   1      }
 410          void sleep(bit on)
 411          {
 412   1         if(on)
 413   1               {
 414   2                szlight[2] |= 0x0010;    //0x0014;0x002a
 415   2                szlight[2] &= ~0x002e;
 416   2               }
 417   1         else
 418   1               {
 419   2                szlight[2] |= 0x0012;    //0x0014;0x002a
 420   2                szlight[2] &= ~0x002c;
 421   2               }
 422   1      }
 423          void settime(bit on)
 424          {
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 8   

 425   1         if(on)
 426   1               {
 427   2                szlight[3] |= 0x002c;    //0x0014;0x002a
 428   2                szlight[3] &= ~0x0012;
 429   2               }
 430   1         else
 431   1               {
 432   2                szlight[3] |= 0x0012;    //0x0014;0x002a
 433   2                szlight[3] &= ~0x002c;
 434   2               }
 435   1      }
 436          void babylock(bit on)
 437          {
 438   1         if(on)
 439   1               {
 440   2                szlight[6] |= 0x002c;    //0x0014;0x002a
 441   2                szlight[6] &= ~0x0012;
 442   2               }
 443   1         else
 444   1               {
 445   2                szlight[6] |= 0x0012;    //0x0014;0x002a
 446   2                szlight[6] &= ~0x002c;
 447   2               }
 448   1      }
 449          void setwind(bit on)
 450          {
 451   1         if(on)
 452   1               {
 453   2                szlight[5] |= 0x002c;    //0x0014;0x002a
 454   2                szlight[5] &= ~0x0012;
 455   2               }
 456   1         else
 457   1               {
 458   2                szlight[5] |= 0x0012;    //0x0014;0x002a
 459   2                szlight[5] &= ~0x002c;
 460   2               }
 461   1      }
 462          void setanion(bit on)
 463          {
 464   1           if(on)
 465   1               {
 466   2                szlight[4] |= 0x002c;    //0x0014;0x002a
 467   2                szlight[4] &= ~0x0012;
 468   2               }
 469   1         else
 470   1               {
 471   2                szlight[4] |= 0x0012;    //0x0014;0x002a
 472   2                szlight[4] &= ~0x002c;
 473   2               }
 474   1      }
 475          void setbac(bit on)
 476          {
 477   1           if(on)
 478   1               {
 479   2                szlight[7] |= 0x002c;    //0x0014;0x002a
 480   2                szlight[7] &= ~0x0012;
 481   2               }
 482   1         else
 483   1               {
 484   2                szlight[7] |= 0x0012;    //0x0014;0x002a
 485   2                szlight[7] &= ~0x002c;
 486   2               }
C51 COMPILER V9.01   LIGHT                                                                 06/22/2018 20:52:08 PAGE 9   

 487   1      }
 488          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2197    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     23       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----      19
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
